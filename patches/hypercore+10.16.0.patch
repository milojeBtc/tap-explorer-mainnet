diff --git a/node_modules/hypercore/.DS_Store b/node_modules/hypercore/.DS_Store
new file mode 100644
index 0000000..993e74b
Binary files /dev/null and b/node_modules/hypercore/.DS_Store differ
diff --git a/node_modules/hypercore/lib/bitfield.js b/node_modules/hypercore/lib/bitfield.js
index ef514a0..0e91ba2 100644
--- a/node_modules/hypercore/lib/bitfield.js
+++ b/node_modules/hypercore/lib/bitfield.js
@@ -249,6 +249,8 @@ module.exports = class Bitfield {
     let j = start & (BITS_PER_PAGE - 1)
     let i = (start - j) / BITS_PER_PAGE
 
+    let ranges_cache = [];
+
     while (length > 0) {
       let p = this._pages.get(i)
 
@@ -262,6 +264,14 @@ module.exports = class Bitfield {
       const end = Math.min(j + length, BITS_PER_PAGE)
       const range = end - j
 
+      let cache_signature = j + '-' + range + '-' + (val ? 'true' : 'false');
+
+      if(ranges_cache.includes(cache_signature))
+      {
+        length -= range
+        continue;
+      }
+
       if (p) {
         p.setRange(j, range, val)
 
@@ -269,6 +279,8 @@ module.exports = class Bitfield {
           p.dirty = true
           this.unflushed.push(p)
         }
+
+        ranges_cache.push(cache_signature);
       }
 
       j = 0
diff --git a/node_modules/hypercore/lib/remote-bitfield.js b/node_modules/hypercore/lib/remote-bitfield.js
index bca4547..fbd70ee 100644
--- a/node_modules/hypercore/lib/remote-bitfield.js
+++ b/node_modules/hypercore/lib/remote-bitfield.js
@@ -33,6 +33,7 @@ class RemoteBitfieldPage {
   }
 
   setRange (start, length, val) {
+
     quickbit.fill(this.bitfield, val, start, start + length)
 
     let i = Math.floor(start / 32)
@@ -167,7 +168,10 @@ module.exports = class RemoteBitfield {
     let j = start & (BITS_PER_PAGE - 1)
     let i = (start - j) / BITS_PER_PAGE
 
+    let ranges_cache = [];
+
     while (length > 0) {
+
       let p = this._pages.get(i)
 
       if (!p && val) {
@@ -180,7 +184,18 @@ module.exports = class RemoteBitfield {
       const end = Math.min(j + length, BITS_PER_PAGE)
       const range = end - j
 
-      if (p) p.setRange(j, range, val)
+      let cache_signature = j + '-' + range + '-' + (val ? 'true' : 'false');
+
+      if(ranges_cache.includes(cache_signature))
+      {
+        length -= range
+        continue;
+      }
+
+      if (p){
+        p.setRange(j, range, val)
+        ranges_cache.push(cache_signature);
+      }
 
       j = 0
       i++
diff --git a/node_modules/hypercore/lib/replicator.js b/node_modules/hypercore/lib/replicator.js
index 3d55013..e896b4d 100644
--- a/node_modules/hypercore/lib/replicator.js
+++ b/node_modules/hypercore/lib/replicator.js
@@ -775,12 +775,18 @@ class Peer {
     // If no blocks < .length is avaible then try the "needs upgrade" range
 
     for (let i = 0; i < len; i++) {
+
+      if(typeof this == 'undefined' || this.stream.closed || !this.remoteOpened || !this.stream.opened)
+      {
+        return true;
+      }
+
       let index = off + i
       if (index >= end) index -= len
 
       if (r.blocks !== null) index = r.blocks[index]
 
-      if (this.remoteBitfield.get(index) === false) continue
+      //if (this.remoteBitfield.get(index) === false) continue
       if (this.core.bitfield.get(index) === true) continue
 
       const b = this.replicator._blocks.add(index)
